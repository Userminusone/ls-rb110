When an iterator like each iterates over an array, it iterates through the elements by using an internal counter to access all the elements in order. This means that, if the array is modified while it is being iterated over, the element that is passed into the block passed into the iterator at a certain iteration is determined not only by the value of the internal counter but also by what element happens to be at the position of that value in the array.
In the first code example, the output would be 
1
3
On the first iteration, the internal counter will have the value 0, meaning the value 1 will be passed into the block and 1 will be output. However, the first value will be removed from the array and the internal counter will be incremented to 1, meaning that the element at position 1 of the array will now be 3, and this is what will be passed to the block. After this, the iterator will terminate since 2 will be out of the bounds of the array after the next shift statement is executed.
In the second code example, the output would be
1
2
In this case, since values are being removed from the end of the array rather than at the beginning of the array, the iterator will function as normal at first, but will terminate after 2 iterations since the internal counter's value of 2 after these iterations will now be out of bounds of the array, which will only contain 2 elements after invoking pop twice.